/// <reference types="node" />
export declare const globalObj: {
    this: NodeJS.Global;
    self: NodeJS.Global;
    Array: ArrayConstructor;
    ArrayBuffer: ArrayBufferConstructor;
    Boolean: BooleanConstructor;
    Buffer: typeof Buffer;
    DataView: DataViewConstructor;
    Date: DateConstructor;
    Error: ErrorConstructor;
    EvalError: EvalErrorConstructor;
    Float32Array: Float32ArrayConstructor;
    Float64Array: Float64ArrayConstructor;
    Function: FunctionConstructor;
    GLOBAL: NodeJS.Global;
    Infinity: number;
    Int16Array: Int16ArrayConstructor;
    Int32Array: Int32ArrayConstructor;
    Int8Array: Int8ArrayConstructor;
    Intl: typeof Intl;
    JSON: JSON;
    Map: MapConstructor;
    Math: Math;
    NaN: number;
    Number: NumberConstructor;
    Object: ObjectConstructor;
    Promise: PromiseConstructor;
    RangeError: RangeErrorConstructor;
    ReferenceError: ReferenceErrorConstructor;
    RegExp: RegExpConstructor;
    Set: SetConstructor;
    String: StringConstructor;
    Symbol: SymbolConstructor;
    SyntaxError: SyntaxErrorConstructor;
    TypeError: TypeErrorConstructor;
    URIError: URIErrorConstructor;
    Uint16Array: Uint16ArrayConstructor;
    Uint32Array: Uint32ArrayConstructor;
    Uint8Array: Uint8ArrayConstructor;
    Uint8ClampedArray: Uint8ClampedArrayConstructor;
    WeakMap: WeakMapConstructor;
    WeakSet: WeakSetConstructor;
    clearImmediate: typeof clearImmediate;
    clearInterval: typeof clearInterval;
    clearTimeout: typeof clearTimeout;
    console: Console;
    decodeURI: typeof decodeURI;
    decodeURIComponent: typeof decodeURIComponent;
    encodeURI: typeof encodeURI;
    encodeURIComponent: typeof encodeURIComponent;
    escape: typeof escape;
    eval: typeof eval;
    global: NodeJS.Global;
    isFinite: typeof isFinite;
    isNaN: typeof isNaN;
    parseFloat: typeof parseFloat;
    parseInt: typeof parseInt;
    process: NodeJS.Process;
    root: NodeJS.Global;
    setImmediate: typeof setImmediate;
    setInterval: typeof setInterval;
    setTimeout: typeof setTimeout;
    undefined: undefined;
    unescape: typeof unescape;
};
